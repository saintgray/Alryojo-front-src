## REACT

    Facebook team 이 개발한 유저 인터페이스를 구현하는데 사용되는 오픈 소스 자바 스크립트 라이브러리
    JQuery의 경우 간단한 DOM 조작에 그치지만 React 를 사용할 경우
    가상 DOM 요소를 활용하여 서버로부터 데이터를 받아 업데이트 해야 하는 DOM 요소를 찾아
    해당 부분만 업데이트 하기 때문에 렌더링이 잦은 서비스에서 빠른 퍼포먼스를 보여주는 것이 특징이다.

## Features

    Component 라는 요소를 가지고 서비스 페이지의 화면단을 분리하여 구현할 수 있으며, js(javascript) 파일로
    만들어서 공유가 가능하기 때문에 이미 만들어 놓은 Components를 조립하여 (jsp 에서 include 태그를 사용하여 
    이미 만들어 놓은 레이아웃을 조립하듯이) 웹 페이지를 구성할 수 있다.

    가상 DOM 의 경우에 기존 웹 개발 방식의 경우 업데이트 해야 하는 해당 DOM 을 직접적으로 조작해서
    적용시키는것과 달리 ($('#targetDiv').html(태그 문자열 , Jquery 로 만든 문서객체)) DOM 을 직접적으로
    조작하지 않고 데이터가 변화할 시 (=사용자가 서버로부터 데이터를 요청하여 서버가 데이터를 응답시) 실제 적용
    시켜야 하는 target DOM 과 가상 DOM 의 차이점을 비교하고, 변경된 부분을 실제 DOM 에 적용시키는 방식이다.

    따라서 데이터가 자주 변경되지 않은 비교적 정적인 웹페이지에 적용시킬 경우 오히려 성능을 떨어뜨릴 수 있지만,
    보여지는 데이터의 변경이 잦으며, 데이터의 송수신이 매우 빈번히 일어나는 서비스일 경우 이 React 를 사용하여
    성능을 크게 향상시킬 수 있다.

## JSX(javascript extension)

    React 에서는 HTML 을 표현할 때 표준 태그 표현이 아닌 JSX 라는 문법을 사용한다.
    외관상으로는 HTML 마크업 언어와 유사해 보이나 빌드 시에 자동으로 자바스크립트로 변화된다.
    따라서 정해놓은 문법을 따라야 빌드시 그에 맞는 HTML 속성이나 태그로 변환되는 특징이 있다.
    
        1. class 속성의 경우 JSX 에서는 className 이라는 속성이름을 써야 한다.
        2. 반복문 for 의 경우 htmlFor 로 사용한다.
        3. onclick 등 이벤트 핸들링 단어는 camel 표기법으로 표기한다 (onClick)
        4. 주석의 경우 <!-- --> 가 아닌 {/*  주 석  */} 으로 표기한다.
        5. js를 사용할 수 있으며 {}로 불러온다. ex) {console.log('하이')}

    